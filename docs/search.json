[
  {
    "objectID": "HW08.html",
    "href": "HW08.html",
    "title": "Homework8",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "HW08.html#quarto",
    "href": "HW08.html#quarto",
    "title": "Homework8",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "HW08.html#running-code",
    "href": "HW08.html#running-code",
    "title": "Homework8",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed).\n\nimport all the libraries\n\nlibrary(readr)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ purrr     1.0.2\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(lubridate)\nlibrary(dplyr)\nlibrary(ggplot2)\n#install.packages(\"corrr\")\n#install.packages(\"tidymodels\")\nlibrary(corrr)\nlibrary(tidymodels)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n✔ broom        1.0.6     ✔ rsample      1.2.1\n✔ dials        1.3.0     ✔ tune         1.2.1\n✔ infer        1.0.7     ✔ workflows    1.1.4\n✔ modeldata    1.4.0     ✔ workflowsets 1.1.0\n✔ parsnip      1.2.1     ✔ yardstick    1.3.1\n✔ recipes      1.1.0     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Search for functions across packages at https://www.tidymodels.org/find/"
  },
  {
    "objectID": "HW08.html#eda",
    "href": "HW08.html#eda",
    "title": "Homework8",
    "section": "EDA",
    "text": "EDA\n\n\nChecking the Data\n\ncheck for missing values(Here is no missing values)\n\n\nsum(is.na(bike_data))\n\n[1] 0\n\n\n\ncolSums(is.na(bike_data))\n\n                 Date     Rented_Bike_Count                  Hour \n                    0                     0                     0 \n          Temperature              Humidity             Windspeed \n                    0                     0                     0 \n           Visibility Dew_Point_Temperature       Solar_Radiation \n                    0                     0                     0 \n             Rainfall              Snowfall               Seasons \n                    0                     0                     0 \n              Holiday       Functioning_Day \n                    0                     0 \n\n\n\n2. Check the column types and the values within the columns to make sure they make sense (basic summary stats for numeric columns and check the unique values for the categorical variables).\n\nstr(bike_data)\n\ntibble [8,760 × 14] (S3: tbl_df/tbl/data.frame)\n $ Date                 : chr [1:8760] \"01/12/2017\" \"01/12/2017\" \"01/12/2017\" \"01/12/2017\" ...\n $ Rented_Bike_Count    : num [1:8760] 254 204 173 107 78 100 181 460 930 490 ...\n $ Hour                 : num [1:8760] 0 1 2 3 4 5 6 7 8 9 ...\n $ Temperature          : num [1:8760] -5.2 -5.5 -6 -6.2 -6 -6.4 -6.6 -7.4 -7.6 -6.5 ...\n $ Humidity             : num [1:8760] 37 38 39 40 36 37 35 38 37 27 ...\n $ Windspeed            : num [1:8760] 2.2 0.8 1 0.9 2.3 1.5 1.3 0.9 1.1 0.5 ...\n $ Visibility           : num [1:8760] 2000 2000 2000 2000 2000 ...\n $ Dew_Point_Temperature: num [1:8760] -17.6 -17.6 -17.7 -17.6 -18.6 -18.7 -19.5 -19.3 -19.8 -22.4 ...\n $ Solar_Radiation      : num [1:8760] 0 0 0 0 0 0 0 0 0.01 0.23 ...\n $ Rainfall             : num [1:8760] 0 0 0 0 0 0 0 0 0 0 ...\n $ Snowfall             : num [1:8760] 0 0 0 0 0 0 0 0 0 0 ...\n $ Seasons              : chr [1:8760] \"Winter\" \"Winter\" \"Winter\" \"Winter\" ...\n $ Holiday              : chr [1:8760] \"No Holiday\" \"No Holiday\" \"No Holiday\" \"No Holiday\" ...\n $ Functioning_Day      : chr [1:8760] \"Yes\" \"Yes\" \"Yes\" \"Yes\" ...\n\n\n\n\nsummary stats for numeric columns\n\nnumeric_stats &lt;- bike_data |&gt;\n  select_if(is.numeric) |&gt;\n  summary()\nprint(numeric_stats)\n\n Rented_Bike_Count      Hour        Temperature        Humidity    \n Min.   :   0.0    Min.   : 0.00   Min.   :-17.80   Min.   : 0.00  \n 1st Qu.: 191.0    1st Qu.: 5.75   1st Qu.:  3.50   1st Qu.:42.00  \n Median : 504.5    Median :11.50   Median : 13.70   Median :57.00  \n Mean   : 704.6    Mean   :11.50   Mean   : 12.88   Mean   :58.23  \n 3rd Qu.:1065.2    3rd Qu.:17.25   3rd Qu.: 22.50   3rd Qu.:74.00  \n Max.   :3556.0    Max.   :23.00   Max.   : 39.40   Max.   :98.00  \n   Windspeed       Visibility   Dew_Point_Temperature Solar_Radiation \n Min.   :0.000   Min.   :  27   Min.   :-30.600       Min.   :0.0000  \n 1st Qu.:0.900   1st Qu.: 940   1st Qu.: -4.700       1st Qu.:0.0000  \n Median :1.500   Median :1698   Median :  5.100       Median :0.0100  \n Mean   :1.725   Mean   :1437   Mean   :  4.074       Mean   :0.5691  \n 3rd Qu.:2.300   3rd Qu.:2000   3rd Qu.: 14.800       3rd Qu.:0.9300  \n Max.   :7.400   Max.   :2000   Max.   : 27.200       Max.   :3.5200  \n    Rainfall          Snowfall      \n Min.   : 0.0000   Min.   :0.00000  \n 1st Qu.: 0.0000   1st Qu.:0.00000  \n Median : 0.0000   Median :0.00000  \n Mean   : 0.1487   Mean   :0.07507  \n 3rd Qu.: 0.0000   3rd Qu.:0.00000  \n Max.   :35.0000   Max.   :8.80000  \n\n\n\n\ncheck the unique values for the categorical variables\n\nunique season values\n\n\nunique_season &lt;- bike_data |&gt;\n  pull(Seasons) |&gt;\n  unique()\nprint(unique_season)\n\n[1] \"Winter\" \"Spring\" \"Summer\" \"Autumn\"\n\n\n\n\nunique holiday values\n\nunique_holidy &lt;- bike_data |&gt;\n  pull(Holiday) |&gt;\n  unique()\nprint(unique_holidy)\n\n[1] \"No Holiday\" \"Holiday\"   \n\n\n\n\nunique Functioning Day\n\nunique(bike_data$Functioning_Day)\n\n[1] \"Yes\" \"No\" \n\n\n\n\nConvert the Date column into an actual date\n\nbike_data &lt;- bike_data |&gt;\n  mutate(\n    # Convert the Date column into an actual date\n    Date = dmy(Date),\n    # Turn the character variables (Seasons, Holiday, and Functioning Day) into factors.\n    Seasons = as.factor(Seasons),\n    Holiday = as.factor(Holiday),\n    Functioning_Day = as.factor(Functioning_Day)\n\n  )\n\n\nsee the structure of the data\n\n\nstr(bike_data)\n\ntibble [8,760 × 14] (S3: tbl_df/tbl/data.frame)\n $ Date                 : Date[1:8760], format: \"2017-12-01\" \"2017-12-01\" ...\n $ Rented_Bike_Count    : num [1:8760] 254 204 173 107 78 100 181 460 930 490 ...\n $ Hour                 : num [1:8760] 0 1 2 3 4 5 6 7 8 9 ...\n $ Temperature          : num [1:8760] -5.2 -5.5 -6 -6.2 -6 -6.4 -6.6 -7.4 -7.6 -6.5 ...\n $ Humidity             : num [1:8760] 37 38 39 40 36 37 35 38 37 27 ...\n $ Windspeed            : num [1:8760] 2.2 0.8 1 0.9 2.3 1.5 1.3 0.9 1.1 0.5 ...\n $ Visibility           : num [1:8760] 2000 2000 2000 2000 2000 ...\n $ Dew_Point_Temperature: num [1:8760] -17.6 -17.6 -17.7 -17.6 -18.6 -18.7 -19.5 -19.3 -19.8 -22.4 ...\n $ Solar_Radiation      : num [1:8760] 0 0 0 0 0 0 0 0 0.01 0.23 ...\n $ Rainfall             : num [1:8760] 0 0 0 0 0 0 0 0 0 0 ...\n $ Snowfall             : num [1:8760] 0 0 0 0 0 0 0 0 0 0 ...\n $ Seasons              : Factor w/ 4 levels \"Autumn\",\"Spring\",..: 4 4 4 4 4 4 4 4 4 4 ...\n $ Holiday              : Factor w/ 2 levels \"Holiday\",\"No Holiday\": 2 2 2 2 2 2 2 2 2 2 ...\n $ Functioning_Day      : Factor w/ 2 levels \"No\",\"Yes\": 2 2 2 2 2 2 2 2 2 2 ...\n\n\n\n\nCreate summary statistics across categorical variables\n\nbike_data_summary &lt;- bike_data |&gt;\n  filter(Functioning_Day == \"Yes\") |&gt;\n  group_by(Seasons, Holiday) |&gt;\n  summarize(\n    Rented_Bike_Count_mean = mean(Rented_Bike_Count),\n    Rented_Bike_Count_sd = sd(Rented_Bike_Count),\n    Rented_Bike_Count_median = median(Rented_Bike_Count),\n    .groups = \"drop\"\n  )\nbike_data_summary\n\n# A tibble: 8 × 5\n  Seasons Holiday    Rented_Bike_Count_mean Rented_Bike_Count_sd\n  &lt;fct&gt;   &lt;fct&gt;                       &lt;dbl&gt;                &lt;dbl&gt;\n1 Autumn  Holiday                      948.                 603.\n2 Autumn  No Holiday                   923.                 618.\n3 Spring  Holiday                      635.                 609.\n4 Spring  No Holiday                   750.                 619.\n5 Summer  Holiday                     1022.                 564.\n6 Summer  No Holiday                  1034.                 693.\n7 Winter  Holiday                      157.                 108.\n8 Winter  No Holiday                   232.                 152.\n# ℹ 1 more variable: Rented_Bike_Count_median &lt;dbl&gt;\n\n\n\n\nWe make a graph for the Functioning Day but here is no No holiday\n\nggplot(bike_data, aes(x = Seasons, y = Rented_Bike_Count, fill = Functioning_Day)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(\n    title = \"Mean Bike Rentals by Seasons and Holiday\",\n    x = \"Season\",\n    y = \"Mean Bike Rentals\",\n    fill = \"Holiday\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nShow it in graph\nhere we see the mean of bike rentals by seasons and Holiday\n\n\nggplot(bike_data_summary, aes(x = Seasons, y = Rented_Bike_Count_mean, fill = Holiday)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(\n    title = \"Mean Bike Rentals by Seasons and Holiday\",\n    x = \"Season\",\n    y = \"Mean Bike Rentals\",\n    fill = \"Holiday\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "HW08.html#draw-graph-to-see-the-mean-of-bike-rentals-by-season-and-holiday",
    "href": "HW08.html#draw-graph-to-see-the-mean-of-bike-rentals-by-season-and-holiday",
    "title": "Homework8",
    "section": "Draw graph to see the Mean of bike rentals by season and Holiday",
    "text": "Draw graph to see the Mean of bike rentals by season and Holiday\nNote :– Here is nothing in the Functioning Day column, all are Yes only.\n\nggplot(bike_data, aes(x = Seasons, y = Rented_Bike_Count, fill = Functioning_Day)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(\n    title = \"Mean Bike Rentals by Seasons and Holiday\",\n    x = \"Season\",\n    y = \"Mean Bike Rentals\",\n    fill = \"Holiday\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nTo simplify our analysis, we’ll summarize across the hours so that each day has one observation associated with it. • Let’s group_by() the date, seasons, and holiday variables. • Find the sum of the bike_count, rainfall, and snowfall variables • Find the mean of all the weather related variables. • This will be our new data that we’ll analyze!\n\n\nsummarize_bike_hour &lt;- bike_data |&gt;\n  group_by(Date, Seasons, Holiday) |&gt;\n  # sum of bike_count, rainfall and snowfall\n  summarize(\n    Rented_Bike_sum = sum(Rented_Bike_Count),\n    Rainfall_sum = sum(Rainfall),\n    Snowfall_sum = sum(Snowfall),\n    Temperature_mean = mean(Temperature),\n    Humidity_mean = mean(Humidity),\n    Windspeed_mean = mean(Windspeed),\n    Visibility_mean = mean(Visibility),\n    Dew_Point_Temperature_mean = mean(Dew_Point_Temperature),\n    Solar_Radiation_mean = mean(Solar_Radiation),\n    Rainfall_mean = mean(Rainfall),\n    Snowfall_mean = mean(Snowfall),\n #`summarize()` has grouped output by 'Date', 'Seasons'. You can override using the `.groups` argument.\n    .groups = \"drop\"\n  )"
  },
  {
    "objectID": "HW08.html#final-data-for-analyzing",
    "href": "HW08.html#final-data-for-analyzing",
    "title": "Homework8",
    "section": "Final Data for analyzing",
    "text": "Final Data for analyzing\n\nprint(summarize_bike_hour)\n\n# A tibble: 365 × 14\n   Date       Seasons Holiday    Rented_Bike_sum Rainfall_sum Snowfall_sum\n   &lt;date&gt;     &lt;fct&gt;   &lt;fct&gt;                &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;\n 1 2017-12-01 Winter  No Holiday            9539          0            0  \n 2 2017-12-02 Winter  No Holiday            8523          0            0  \n 3 2017-12-03 Winter  No Holiday            7222          4            0  \n 4 2017-12-04 Winter  No Holiday            8729          0.1          0  \n 5 2017-12-05 Winter  No Holiday            8307          0            0  \n 6 2017-12-06 Winter  No Holiday            6669          1.3          8.6\n 7 2017-12-07 Winter  No Holiday            8549          0           10.4\n 8 2017-12-08 Winter  No Holiday            8032          0            0  \n 9 2017-12-09 Winter  No Holiday            7233          0            0  \n10 2017-12-10 Winter  No Holiday            3453          4.1         32.5\n# ℹ 355 more rows\n# ℹ 8 more variables: Temperature_mean &lt;dbl&gt;, Humidity_mean &lt;dbl&gt;,\n#   Windspeed_mean &lt;dbl&gt;, Visibility_mean &lt;dbl&gt;,\n#   Dew_Point_Temperature_mean &lt;dbl&gt;, Solar_Radiation_mean &lt;dbl&gt;,\n#   Rainfall_mean &lt;dbl&gt;, Snowfall_mean &lt;dbl&gt;"
  },
  {
    "objectID": "HW08.html#recreate-your-basic-summary-stats-and-then-create-some-plots-to-explore-relationships.",
    "href": "HW08.html#recreate-your-basic-summary-stats-and-then-create-some-plots-to-explore-relationships.",
    "title": "Homework8",
    "section": "8. Recreate your basic summary stats and then create some plots to explore relationships.",
    "text": "8. Recreate your basic summary stats and then create some plots to explore relationships.\n\nReport correlation between your numeric variables as well.\n\n\n# check the Bike rentals vs. Temperature by Season\n\nggplot(summarize_bike_hour , aes(x= Temperature_mean, y = Rented_Bike_sum, color = Seasons)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", color = \"blue\")+\n  labs(title = \"Bike Rentals count vs. Temperature by Season\", \n       x = \"Temperature (°C)\",\n       y = \"Rented Bike Count\") +\n  theme_minimal()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\ncheck Bike rentals vs. Windspeed\n\nggplot(summarize_bike_hour, aes(x = Windspeed_mean, y = Rented_Bike_sum)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", color = \"Red\") +\n  labs(title = \"Bike Rentals vs. Windspeed\",\n       x = \"Windspeed (Km/h)\", y = \"Rented Bike Count\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\nCheck Bike rental vs. Rainfall\n\nggplot(summarize_bike_hour, aes(x = Rainfall_sum, y = Rented_Bike_sum)) +\n  geom_point(alpha = 0.7) +\n  geom_smooth(method = \"lm\", color = \"Red\") +\n  labs(title = \"Bike Rentals vs. Rainfall\",\n       x = \"Rainfall (mm)\",\n       y = \"Rented Bike Count\") +\n  theme_minimal()\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "HW08.html#st-recipe",
    "href": "HW08.html#st-recipe",
    "title": "Homework8",
    "section": "1st Recipe:–",
    "text": "1st Recipe:–\n#Let’s ignore the date variable for modeling (so we’ll need to remove that or give it a different ID) #but use it to create a weekday/weekend (factor) variable. #You can use step_date() then step_mutate() with a factor(if_else(…)) to create the variable. #I then had to remove the intermediate variable created.) • Let’s standardize the numeric variables since their scales are pretty different. • Let’s create dummy variables for the seasons, holiday, and our new day type variable\n\n# Ensure 'Date' is properly converted in 'bike_train'\nbike_train &lt;- bike_train |&gt;\n  mutate(Date = as.Date(Date, format = \"%Y-%m-%d\"))"
  },
  {
    "objectID": "HW08.html#recipe-1",
    "href": "HW08.html#recipe-1",
    "title": "Homework8",
    "section": "Recipe 1",
    "text": "Recipe 1\n\nrecipe_1 &lt;- recipe(Rented_Bike_sum ~ ., data = bike_train) |&gt;\n  step_mutate(day_type = factor(if_else(wday(Date) %in% c(1, 7), \"weekend\", \"weekday\"))) |&gt;\n  step_rm(Date) |&gt;\n  step_normalize(all_numeric(), -all_outcomes()) |&gt;\n  step_dummy(Seasons, Holiday, day_type)\n\nrecipe_1_prepped &lt;- prep(recipe_1, training = bike_train)\nbike_train_transformed1 &lt;- bake(recipe_1_prepped, new_data = NULL)\n\n# Display the transformed data to confirm\nhead(bike_train_transformed1)\n\n# A tibble: 6 × 16\n  Rainfall_sum Snowfall_sum Temperature_mean Humidity_mean Windspeed_mean\n         &lt;dbl&gt;        &lt;dbl&gt;            &lt;dbl&gt;         &lt;dbl&gt;          &lt;dbl&gt;\n1       -0.315       -0.223            1.12          0.143         -0.852\n2       -0.315       -0.223            1.08         -0.300         -0.342\n3        2.57        -0.223            0.954         1.54          -1.10 \n4       -0.315       -0.223            0.923         0.835          0.800\n5       -0.315       -0.223            0.975         0.181          1.38 \n6       -0.315       -0.223            1.01          0.779          0.333\n# ℹ 11 more variables: Visibility_mean &lt;dbl&gt;, Dew_Point_Temperature_mean &lt;dbl&gt;,\n#   Solar_Radiation_mean &lt;dbl&gt;, Rainfall_mean &lt;dbl&gt;, Snowfall_mean &lt;dbl&gt;,\n#   Rented_Bike_sum &lt;dbl&gt;, Seasons_Spring &lt;dbl&gt;, Seasons_Summer &lt;dbl&gt;,\n#   Seasons_Winter &lt;dbl&gt;, Holiday_No.Holiday &lt;dbl&gt;, day_type_weekend &lt;dbl&gt;"
  },
  {
    "objectID": "HW08.html#nd-recipe",
    "href": "HW08.html#nd-recipe",
    "title": "Homework8",
    "section": "2nd recipe:",
    "text": "2nd recipe:\n• Do the same steps as above. • Add in interactions between seasons and holiday, seasons and temp, temp and rainfall.\n\n# Step 1: Create the recipe with dummy variables\n# recipe_2 &lt;- recipe(Rented_Bike_sum ~ ., data = bike_train) |&gt;\n#   step_mutate(day_type = factor(if_else(wday(Date) %in% c(1, 7), \"weekend\", \"weekday\"))) |&gt;\n#   step_rm(Date) |&gt;\n#   step_normalize(all_numeric(), -all_outcomes()) |&gt;\n#   step_dummy(Seasons, Holiday, day_type)  # Create dummies for these variables\n# \n# # Step 2: Manually extract the names of the dummy variables generated by `step_dummy()`\n# dummy_vars &lt;- colnames(bake(recipe_2, new_data = NULL)) # Extract column names\n# \n# # Step 3: Use `starts_with()` to create interactions between the dummy variables\n# recipe_2 &lt;- recipe_2 |&gt;\n#   step_interact(terms = ~ starts_with(\"Seasons\") * starts_with(\"Holiday\") + \n#                   starts_with(\"Seasons\") * Temperature_mean + \n#                   Temperature_mean * Rainfall_sum)\n# \n# # Step 4: Prep and bake the recipe\n# recipe_2_prepped &lt;- prep(recipe_2, training = bike_train)\n# bike_train_transformed &lt;- bake(recipe_2_prepped, new_data = NULL)\n# \n# \n# print(bike_train_transformed)\n\n\n# Step 1: Define the recipe with dummy variables and interactions\nrecipe_2 &lt;- recipe(Rented_Bike_sum ~ ., data = bike_train) |&gt;\n  step_mutate(day_type = factor(if_else(wday(Date) %in% c(1, 7), \"weekend\", \"weekday\"))) |&gt;\n  step_rm(Date) |&gt;\n  step_normalize(all_numeric(), -all_outcomes()) |&gt;\n  step_dummy(Seasons, Holiday, day_type) |&gt;  # Create dummies for these variables\n  step_interact(terms = ~ starts_with(\"Seasons\") * starts_with(\"Holiday\") + \n                  starts_with(\"Seasons\") * Temperature_mean + \n                  Temperature_mean * Rainfall_sum)\n\n# Step 2: Prepare the recipe (prep)\nrecipe_2_prepped &lt;- prep(recipe_2, training = bike_train)\n\n# Step 3: Apply the recipe to transform the training data (bake)\nbike_train_transformed &lt;- bake(recipe_2_prepped, new_data = NULL)\n\n# View the transformed data\nprint(bike_train_transformed)\n\n# A tibble: 273 × 23\n   Rainfall_sum Snowfall_sum Temperature_mean Humidity_mean Windspeed_mean\n          &lt;dbl&gt;        &lt;dbl&gt;            &lt;dbl&gt;         &lt;dbl&gt;          &lt;dbl&gt;\n 1       -0.315       -0.223            1.12          0.143        -0.852 \n 2       -0.315       -0.223            1.08         -0.300        -0.342 \n 3        2.57        -0.223            0.954         1.54         -1.10  \n 4       -0.315       -0.223            0.923         0.835         0.800 \n 5       -0.315       -0.223            0.975         0.181         1.38  \n 6       -0.315       -0.223            1.01          0.779         0.333 \n 7       -0.190       -0.223            0.827        -0.145         1.34  \n 8       -0.315       -0.223            0.786        -0.691        -0.0617\n 9       -0.315       -0.223            0.896        -0.596        -0.241 \n10       -0.315       -0.223            0.775        -0.738        -0.392 \n# ℹ 263 more rows\n# ℹ 18 more variables: Visibility_mean &lt;dbl&gt;, Dew_Point_Temperature_mean &lt;dbl&gt;,\n#   Solar_Radiation_mean &lt;dbl&gt;, Rainfall_mean &lt;dbl&gt;, Snowfall_mean &lt;dbl&gt;,\n#   Rented_Bike_sum &lt;dbl&gt;, Seasons_Spring &lt;dbl&gt;, Seasons_Summer &lt;dbl&gt;,\n#   Seasons_Winter &lt;dbl&gt;, Holiday_No.Holiday &lt;dbl&gt;, day_type_weekend &lt;dbl&gt;,\n#   Seasons_Spring_x_Holiday_No.Holiday &lt;dbl&gt;,\n#   Seasons_Summer_x_Holiday_No.Holiday &lt;dbl&gt;, …"
  },
  {
    "objectID": "HW08.html#for-the-3rd-recipe",
    "href": "HW08.html#for-the-3rd-recipe",
    "title": "Homework8",
    "section": "For the 3rd recipe:",
    "text": "For the 3rd recipe:\n• Do the same as the 2nd recipe. • Add in quadratic terms for each numeric predictor\n\nrecipe_3 &lt;- recipe(Rented_Bike_sum ~ ., data = bike_train) |&gt;\n  step_mutate(day_type = factor(if_else(wday(Date) %in% c(1, 7), \"weekend\", \"weekday\"))) |&gt;\n  step_rm(Date) |&gt;\n  step_normalize(all_numeric(), -all_outcomes()) |&gt;\n  step_dummy(Seasons, Holiday, day_type) |&gt;\n  step_interact(terms = ~ starts_with(\"Seasons\") * starts_with(\"Holiday\") + \n                  starts_with(\"Seasons\") * Temperature_mean + \n                  Temperature_mean * Rainfall_sum) |&gt;\n  # Add quadratic terms for selected numeric predictors\n  step_poly(Temperature_mean, Windspeed_mean, Visibility_mean, Dew_Point_Temperature_mean, Solar_Radiation_mean, Rainfall_mean, Snowfall_mean, degree = 2)\n\n# Check the recipe\nrecipe_3_prepped &lt;- prep(recipe_3, training = bike_train)\nbike_train_transformed_poly &lt;- bake(recipe_3_prepped, new_data = NULL)\n\n# View the transformed data\nprint(bike_train_transformed_poly)\n\n# A tibble: 273 × 30\n   Rainfall_sum Snowfall_sum Humidity_mean Rented_Bike_sum Seasons_Spring\n          &lt;dbl&gt;        &lt;dbl&gt;         &lt;dbl&gt;           &lt;dbl&gt;          &lt;dbl&gt;\n 1       -0.315       -0.223         0.143           26010              0\n 2       -0.315       -0.223        -0.300           26881              0\n 3        2.57        -0.223         1.54            10802              0\n 4       -0.315       -0.223         0.835           29529              0\n 5       -0.315       -0.223         0.181           31114              0\n 6       -0.315       -0.223         0.779           27838              0\n 7       -0.190       -0.223        -0.145           30381              0\n 8       -0.315       -0.223        -0.691           29813              0\n 9       -0.315       -0.223        -0.596           30781              0\n10       -0.315       -0.223        -0.738           31694              0\n# ℹ 263 more rows\n# ℹ 25 more variables: Seasons_Summer &lt;dbl&gt;, Seasons_Winter &lt;dbl&gt;,\n#   Holiday_No.Holiday &lt;dbl&gt;, day_type_weekend &lt;dbl&gt;,\n#   Seasons_Spring_x_Holiday_No.Holiday &lt;dbl&gt;,\n#   Seasons_Summer_x_Holiday_No.Holiday &lt;dbl&gt;,\n#   Seasons_Winter_x_Holiday_No.Holiday &lt;dbl&gt;,\n#   Seasons_Spring_x_Temperature_mean &lt;dbl&gt;, …"
  },
  {
    "objectID": "HW08.html#set-up-our-linear-model-fit-to-use-the-lm-engine",
    "href": "HW08.html#set-up-our-linear-model-fit-to-use-the-lm-engine",
    "title": "Homework8",
    "section": "set up our linear model fit to use the “lm” engine",
    "text": "set up our linear model fit to use the “lm” engine\n\n# Creating a model with tidymodels\nbike_mod &lt;- linear_reg() |&gt;\n  set_engine(\"lm\") |&gt;\n  translate()\n\n\nWorkflow with Model1\n\nbike_wfl_1 &lt;- workflow() |&gt;\n  add_recipe(recipe_1) |&gt;\n  add_model(bike_mod)\n\n\n\nWorkflow with Model2\n\nbike_wfl_2 &lt;- workflow() |&gt;\n  add_recipe(recipe_2) |&gt;\n  add_model(bike_mod)\n\n\n\nWorkflow with Model3\n\nbike_wfl_3 &lt;- workflow() |&gt;\n  add_recipe(recipe_3) |&gt;\n  add_model(bike_mod)\n\n\n\nFit the models using 10 fold CV via fit_resamples()\n\nset.seed(78)\nbike_10_fold &lt;- vfold_cv(bike_train, 10)\n\n\n\nFit with cross-validation on workflow 1\n\nbike_res_1 &lt;- fit_resamples(bike_wfl_1, resamples = bike_10_fold, metrics = metric_set(rmse))\n\n→ A | warning: prediction from rank-deficient fit; consider predict(., rankdeficient=\"NA\")\n\n\nThere were issues with some computations   A: x1\n\n\nThere were issues with some computations   A: x10\n\n\n\n\n\n\n\nFit with cross-validation on workflow 2\n\nbike_res_2 &lt;- fit_resamples(bike_wfl_2, resamples = bike_10_fold, metrics = metric_set(rmse))\n\n→ A | warning: prediction from rank-deficient fit; consider predict(., rankdeficient=\"NA\")\n\n\n\n\nFit with cross-validation on workflow 3\n\nbike_res_3 &lt;- fit_resamples(bike_wfl_3, resamples = bike_10_fold, metrics = metric_set(rmse))\n\n→ A | warning: prediction from rank-deficient fit; consider predict(., rankdeficient=\"NA\")\n\n\n\n\nCollect all the metrices\n\nmetrics_1 &lt;- collect_metrics(bike_res_1)\nmetrics_2 &lt;- collect_metrics(bike_res_2)\nmetrics_3 &lt;- collect_metrics(bike_res_3)\n\n\n\nCombine all the result into one data frame\n\nall_metrics &lt;- rbind(\n  metrics_1 |&gt; mutate(workflow = \"Workflow 1\"),\n  metrics_2 |&gt; mutate(workflow = \"Workflow 2\"),\n  metrics_3 |&gt; mutate(workflow = \"Workflow 3\")\n)\nall_metrics\n\n# A tibble: 3 × 7\n  .metric .estimator  mean     n std_err .config              workflow  \n  &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;                &lt;chr&gt;     \n1 rmse    standard   5626.    10    453. Preprocessor1_Model1 Workflow 1\n2 rmse    standard   5041.    10    650. Preprocessor1_Model1 Workflow 2\n3 rmse    standard   5016.    10    650. Preprocessor1_Model1 Workflow 3\n\n\n\n\nSelect the best workflow\n\nbest_workflow &lt;- all_metrics |&gt;\n  filter(.metric == \"rmse\") |&gt;\n  arrange(mean) |&gt;\n  slice(1)\n\nprint(best_workflow)\n\n# A tibble: 1 × 7\n  .metric .estimator  mean     n std_err .config              workflow  \n  &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;                &lt;chr&gt;     \n1 rmse    standard   5016.    10    650. Preprocessor1_Model1 Workflow 3"
  },
  {
    "objectID": "HW08.html#fit-the-best-workflow",
    "href": "HW08.html#fit-the-best-workflow",
    "title": "Homework8",
    "section": "Fit the best workflow",
    "text": "Fit the best workflow\n• Compute the RMSE metric on the test set.\n\n# Select the best workflow\nworkflows &lt;- list(bike_wfl_1, bike_wfl_2, bike_wfl_3)\nbest_wfl &lt;- workflows[[as.integer(gsub(\"Workflow \", \"\", best_workflow$workflow))]]\n\n# Fit the best model on the training data and evaluate on the test set\nfinal_fit &lt;- best_wfl |&gt;\n  last_fit(split = bike_split)\n\n→ A | warning: prediction from rank-deficient fit; consider predict(., rankdeficient=\"NA\")\n\n# Get the RMSE for the test set\nfinal_metrics &lt;- final_fit |&gt;\n  collect_metrics()\n\nprint(final_metrics)\n\n# A tibble: 2 × 4\n  .metric .estimator .estimate .config             \n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard    5075.    Preprocessor1_Model1\n2 rsq     standard       0.772 Preprocessor1_Model1"
  }
]